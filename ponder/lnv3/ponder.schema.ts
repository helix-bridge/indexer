import { createSchema } from "@ponder/core";

export default createSchema((p) => ({
  LnNonceOrder: p.createTable({
    id: p.string(),
    count: p.bigint(),
  }),
  Lnv3TransferRecord: p.createTable({
    id: p.string(),
    nonce: p.bigint(),
    messageNonce: p.bigint(),
    localChainId: p.bigint(),
    remoteChainId: p.bigint(),
    provider: p.string(),
    sourceToken: p.string(),
    targetToken: p.string(),
    sourceAmount: p.bigint(),
    targetAmount: p.bigint(),
    sender: p.string(),
    receiver: p.string(),
    timestamp: p.bigint(),
    transactionHash: p.string(),
    fee: p.bigint().optional(),
    transferId: p.string(),
    hasWithdrawn: p.boolean().optional(),
  }),
  Lnv3RelayRecord: p.createTable({
    id: p.string(),
    localChainId: p.bigint(),
    relayer: p.string(),
    transactionHash: p.string(),
    timestamp: p.bigint(),
    fee: p.bigint().optional(),
    slashed: p.boolean(),
    requestWithdrawTimestamp: p.bigint().optional(),
  }),
  Lnv3RelayUpdateRecord: p.createTable({
    id: p.string(),
    nonce: p.bigint(),
    localChainId: p.bigint(),
    remoteChainId: p.bigint(),
    updateType: p.int(),
    provider: p.string(),
    sourceToken: p.string(),
    targetToken: p.string(),
    transactionHash: p.string(),
    timestamp: p.bigint(),
    penalty: p.bigint().optional(),
    baseFee: p.bigint().optional(),
    transferLimit: p.bigint().optional(),
    liquidityFeeRate: p.int().optional(),
    paused: p.boolean().optional(),
  }),
  Lnv3PenaltyReserve: p.createTable({
    id: p.string(),
    localChainId: p.bigint(),
    provider: p.string(),
    sourceToken: p.string(),
    penaltyReserved: p.bigint(),
  }),
}));
