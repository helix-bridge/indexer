// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BurnAndRemoteUnlocked extends ethereum.Event {
  get params(): BurnAndRemoteUnlocked__Params {
    return new BurnAndRemoteUnlocked__Params(this);
  }
}

export class BurnAndRemoteUnlocked__Params {
  _event: BurnAndRemoteUnlocked;

  constructor(event: BurnAndRemoteUnlocked) {
    this._event = event;
  }

  get transferId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get messageHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class DailyLimitChange extends ethereum.Event {
  get params(): DailyLimitChange__Params {
    return new DailyLimitChange__Params(this);
  }
}

export class DailyLimitChange__Params {
  _event: DailyLimitChange;

  constructor(event: DailyLimitChange) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dailyLimit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IssuingERC20Created extends ethereum.Event {
  get params(): IssuingERC20Created__Params {
    return new IssuingERC20Created__Params(this);
  }
}

export class IssuingERC20Created__Params {
  _event: IssuingERC20Created;

  constructor(event: IssuingERC20Created) {
    this._event = event;
  }

  get originalToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mappingToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewLogicSetted extends ethereum.Event {
  get params(): NewLogicSetted__Params {
    return new NewLogicSetted__Params(this);
  }
}

export class NewLogicSetted__Params {
  _event: NewLogicSetted;

  constructor(event: NewLogicSetted) {
    this._event = event;
  }

  get tokenType(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TokenIssued extends ethereum.Event {
  get params(): TokenIssued__Params {
    return new TokenIssued__Params(this);
  }
}

export class TokenIssued__Params {
  _event: TokenIssued;

  constructor(event: TokenIssued) {
    this._event = event;
  }

  get transferId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenRemintForFailed extends ethereum.Event {
  get params(): TokenRemintForFailed__Params {
    return new TokenRemintForFailed__Params(this);
  }
}

export class TokenRemintForFailed__Params {
  _event: TokenRemintForFailed;

  constructor(event: TokenRemintForFailed) {
    this._event = event;
  }

  get transferId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Erc20Sub2SubMappingTokenFactory extends ethereum.SmartContract {
  static bind(address: Address): Erc20Sub2SubMappingTokenFactory {
    return new Erc20Sub2SubMappingTokenFactory(
      "Erc20Sub2SubMappingTokenFactory",
      address
    );
  }

  BLACK_HOLE_ADDRESS(): Address {
    let result = super.call(
      "BLACK_HOLE_ADDRESS",
      "BLACK_HOLE_ADDRESS():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_BLACK_HOLE_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "BLACK_HOLE_ADDRESS",
      "BLACK_HOLE_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  CALLER_ROLE(): Bytes {
    let result = super.call("CALLER_ROLE", "CALLER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_CALLER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("CALLER_ROLE", "CALLER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DAO_ADMIN_ROLE(): Bytes {
    let result = super.call("DAO_ADMIN_ROLE", "DAO_ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DAO_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DAO_ADMIN_ROLE",
      "DAO_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  OPERATOR_ROLE(): Bytes {
    let result = super.call("OPERATOR_ROLE", "OPERATOR_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_OPERATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "OPERATOR_ROLE",
      "OPERATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allMappingTokens(param0: BigInt): Address {
    let result = super.call(
      "allMappingTokens",
      "allMappingTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_allMappingTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allMappingTokens",
      "allMappingTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calcMaxWithdraw(token: Address): BigInt {
    let result = super.call(
      "calcMaxWithdraw",
      "calcMaxWithdraw(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_calcMaxWithdraw(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcMaxWithdraw",
      "calcMaxWithdraw(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dailyLimit(param0: Address): BigInt {
    let result = super.call("dailyLimit", "dailyLimit(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_dailyLimit(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dailyLimit", "dailyLimit(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMappingToken(backingAddress: Address, originalToken: Address): Address {
    let result = super.call(
      "getMappingToken",
      "getMappingToken(address,address):(address)",
      [
        ethereum.Value.fromAddress(backingAddress),
        ethereum.Value.fromAddress(originalToken)
      ]
    );

    return result[0].toAddress();
  }

  try_getMappingToken(
    backingAddress: Address,
    originalToken: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMappingToken",
      "getMappingToken(address,address):(address)",
      [
        ethereum.Value.fromAddress(backingAddress),
        ethereum.Value.fromAddress(originalToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  guard(): Address {
    let result = super.call("guard", "guard():(address)", []);

    return result[0].toAddress();
  }

  try_guard(): ethereum.CallResult<Address> {
    let result = super.tryCall("guard", "guard():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hash(value: Bytes): Bytes {
    let result = super.call("hash", "hash(bytes):(bytes32)", [
      ethereum.Value.fromBytes(value)
    ]);

    return result[0].toBytes();
  }

  try_hash(value: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("hash", "hash(bytes):(bytes32)", [
      ethereum.Value.fromBytes(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  helixFee(): BigInt {
    let result = super.call("helixFee", "helixFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_helixFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("helixFee", "helixFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastDay(param0: Address): BigInt {
    let result = super.call("lastDay", "lastDay(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_lastDay(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastDay", "lastDay(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mappingToken2OriginalToken(param0: Address): Address {
    let result = super.call(
      "mappingToken2OriginalToken",
      "mappingToken2OriginalToken(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_mappingToken2OriginalToken(
    param0: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "mappingToken2OriginalToken",
      "mappingToken2OriginalToken(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  messageEndpoint(): Address {
    let result = super.call(
      "messageEndpoint",
      "messageEndpoint():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_messageEndpoint(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "messageEndpoint",
      "messageEndpoint():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newErc20Contract(
    tokenType: BigInt,
    originalToken: Address,
    bridgedChainName: string,
    name: string,
    symbol: string,
    decimals: i32,
    dailyLimit: BigInt
  ): Address {
    let result = super.call(
      "newErc20Contract",
      "newErc20Contract(uint32,address,string,string,string,uint8,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenType),
        ethereum.Value.fromAddress(originalToken),
        ethereum.Value.fromString(bridgedChainName),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimals)),
        ethereum.Value.fromUnsignedBigInt(dailyLimit)
      ]
    );

    return result[0].toAddress();
  }

  try_newErc20Contract(
    tokenType: BigInt,
    originalToken: Address,
    bridgedChainName: string,
    name: string,
    symbol: string,
    decimals: i32,
    dailyLimit: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newErc20Contract",
      "newErc20Contract(uint32,address,string,string,string,uint8,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenType),
        ethereum.Value.fromAddress(originalToken),
        ethereum.Value.fromString(bridgedChainName),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimals)),
        ethereum.Value.fromUnsignedBigInt(dailyLimit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  remoteBacking(): Address {
    let result = super.call("remoteBacking", "remoteBacking():(address)", []);

    return result[0].toAddress();
  }

  try_remoteBacking(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "remoteBacking",
      "remoteBacking():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  salt2MappingToken(param0: Bytes): Address {
    let result = super.call(
      "salt2MappingToken",
      "salt2MappingToken(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toAddress();
  }

  try_salt2MappingToken(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "salt2MappingToken",
      "salt2MappingToken(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  spentToday(param0: Address): BigInt {
    let result = super.call("spentToday", "spentToday(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_spentToday(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("spentToday", "spentToday(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenLength(): BigInt {
    let result = super.call("tokenLength", "tokenLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenLength", "tokenLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenType2Logic(param0: BigInt): Address {
    let result = super.call(
      "tokenType2Logic",
      "tokenType2Logic(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_tokenType2Logic(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenType2Logic",
      "tokenType2Logic(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class BurnAndRemoteUnlockCall extends ethereum.Call {
  get inputs(): BurnAndRemoteUnlockCall__Inputs {
    return new BurnAndRemoteUnlockCall__Inputs(this);
  }

  get outputs(): BurnAndRemoteUnlockCall__Outputs {
    return new BurnAndRemoteUnlockCall__Outputs(this);
  }
}

export class BurnAndRemoteUnlockCall__Inputs {
  _call: BurnAndRemoteUnlockCall;

  constructor(call: BurnAndRemoteUnlockCall) {
    this._call = call;
  }

  get remoteSpecVersion(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get remoteReceiveGasLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get mappingToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class BurnAndRemoteUnlockCall__Outputs {
  _call: BurnAndRemoteUnlockCall;

  constructor(call: BurnAndRemoteUnlockCall) {
    this._call = call;
  }
}

export class ChangeDailyLimitCall extends ethereum.Call {
  get inputs(): ChangeDailyLimitCall__Inputs {
    return new ChangeDailyLimitCall__Inputs(this);
  }

  get outputs(): ChangeDailyLimitCall__Outputs {
    return new ChangeDailyLimitCall__Outputs(this);
  }
}

export class ChangeDailyLimitCall__Inputs {
  _call: ChangeDailyLimitCall;

  constructor(call: ChangeDailyLimitCall) {
    this._call = call;
  }

  get mappingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeDailyLimitCall__Outputs {
  _call: ChangeDailyLimitCall;

  constructor(call: ChangeDailyLimitCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class HandleIssuingFailureFromRemoteCall extends ethereum.Call {
  get inputs(): HandleIssuingFailureFromRemoteCall__Inputs {
    return new HandleIssuingFailureFromRemoteCall__Inputs(this);
  }

  get outputs(): HandleIssuingFailureFromRemoteCall__Outputs {
    return new HandleIssuingFailureFromRemoteCall__Outputs(this);
  }
}

export class HandleIssuingFailureFromRemoteCall__Inputs {
  _call: HandleIssuingFailureFromRemoteCall;

  constructor(call: HandleIssuingFailureFromRemoteCall) {
    this._call = call;
  }

  get transferId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get origin_sender(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class HandleIssuingFailureFromRemoteCall__Outputs {
  _call: HandleIssuingFailureFromRemoteCall;

  constructor(call: HandleIssuingFailureFromRemoteCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _messageEndpoint(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class IssueMappingTokenCall extends ethereum.Call {
  get inputs(): IssueMappingTokenCall__Inputs {
    return new IssueMappingTokenCall__Inputs(this);
  }

  get outputs(): IssueMappingTokenCall__Outputs {
    return new IssueMappingTokenCall__Outputs(this);
  }
}

export class IssueMappingTokenCall__Inputs {
  _call: IssueMappingTokenCall;

  constructor(call: IssueMappingTokenCall) {
    this._call = call;
  }

  get originalToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class IssueMappingTokenCall__Outputs {
  _call: IssueMappingTokenCall;

  constructor(call: IssueMappingTokenCall) {
    this._call = call;
  }
}

export class NewErc20ContractCall extends ethereum.Call {
  get inputs(): NewErc20ContractCall__Inputs {
    return new NewErc20ContractCall__Inputs(this);
  }

  get outputs(): NewErc20ContractCall__Outputs {
    return new NewErc20ContractCall__Outputs(this);
  }
}

export class NewErc20ContractCall__Inputs {
  _call: NewErc20ContractCall;

  constructor(call: NewErc20ContractCall) {
    this._call = call;
  }

  get tokenType(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get originalToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get bridgedChainName(): string {
    return this._call.inputValues[2].value.toString();
  }

  get name(): string {
    return this._call.inputValues[3].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[4].value.toString();
  }

  get decimals(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get dailyLimit(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class NewErc20ContractCall__Outputs {
  _call: NewErc20ContractCall;

  constructor(call: NewErc20ContractCall) {
    this._call = call;
  }

  get mappingToken(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoteUnlockFailureCall extends ethereum.Call {
  get inputs(): RemoteUnlockFailureCall__Inputs {
    return new RemoteUnlockFailureCall__Inputs(this);
  }

  get outputs(): RemoteUnlockFailureCall__Outputs {
    return new RemoteUnlockFailureCall__Outputs(this);
  }
}

export class RemoteUnlockFailureCall__Inputs {
  _call: RemoteUnlockFailureCall;

  constructor(call: RemoteUnlockFailureCall) {
    this._call = call;
  }

  get remoteSpecVersion(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get remoteReceiveGasLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get transferId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get originalToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get originalSender(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class RemoteUnlockFailureCall__Outputs {
  _call: RemoteUnlockFailureCall;

  constructor(call: RemoteUnlockFailureCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RescueFundsCall extends ethereum.Call {
  get inputs(): RescueFundsCall__Inputs {
    return new RescueFundsCall__Inputs(this);
  }

  get outputs(): RescueFundsCall__Outputs {
    return new RescueFundsCall__Outputs(this);
  }
}

export class RescueFundsCall__Inputs {
  _call: RescueFundsCall;

  constructor(call: RescueFundsCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RescueFundsCall__Outputs {
  _call: RescueFundsCall;

  constructor(call: RescueFundsCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetHelixFeeCall extends ethereum.Call {
  get inputs(): SetHelixFeeCall__Inputs {
    return new SetHelixFeeCall__Inputs(this);
  }

  get outputs(): SetHelixFeeCall__Outputs {
    return new SetHelixFeeCall__Outputs(this);
  }
}

export class SetHelixFeeCall__Inputs {
  _call: SetHelixFeeCall;

  constructor(call: SetHelixFeeCall) {
    this._call = call;
  }

  get _helixFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetHelixFeeCall__Outputs {
  _call: SetHelixFeeCall;

  constructor(call: SetHelixFeeCall) {
    this._call = call;
  }
}

export class SetMessageEndpointCall extends ethereum.Call {
  get inputs(): SetMessageEndpointCall__Inputs {
    return new SetMessageEndpointCall__Inputs(this);
  }

  get outputs(): SetMessageEndpointCall__Outputs {
    return new SetMessageEndpointCall__Outputs(this);
  }
}

export class SetMessageEndpointCall__Inputs {
  _call: SetMessageEndpointCall;

  constructor(call: SetMessageEndpointCall) {
    this._call = call;
  }

  get _messageEndpoint(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMessageEndpointCall__Outputs {
  _call: SetMessageEndpointCall;

  constructor(call: SetMessageEndpointCall) {
    this._call = call;
  }
}

export class SetRemoteBackingCall extends ethereum.Call {
  get inputs(): SetRemoteBackingCall__Inputs {
    return new SetRemoteBackingCall__Inputs(this);
  }

  get outputs(): SetRemoteBackingCall__Outputs {
    return new SetRemoteBackingCall__Outputs(this);
  }
}

export class SetRemoteBackingCall__Inputs {
  _call: SetRemoteBackingCall;

  constructor(call: SetRemoteBackingCall) {
    this._call = call;
  }

  get _remoteBacking(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRemoteBackingCall__Outputs {
  _call: SetRemoteBackingCall;

  constructor(call: SetRemoteBackingCall) {
    this._call = call;
  }
}

export class SetTokenContractLogicCall extends ethereum.Call {
  get inputs(): SetTokenContractLogicCall__Inputs {
    return new SetTokenContractLogicCall__Inputs(this);
  }

  get outputs(): SetTokenContractLogicCall__Outputs {
    return new SetTokenContractLogicCall__Outputs(this);
  }
}

export class SetTokenContractLogicCall__Inputs {
  _call: SetTokenContractLogicCall;

  constructor(call: SetTokenContractLogicCall) {
    this._call = call;
  }

  get tokenType(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get logic(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetTokenContractLogicCall__Outputs {
  _call: SetTokenContractLogicCall;

  constructor(call: SetTokenContractLogicCall) {
    this._call = call;
  }
}

export class TransferMappingTokenOwnershipCall extends ethereum.Call {
  get inputs(): TransferMappingTokenOwnershipCall__Inputs {
    return new TransferMappingTokenOwnershipCall__Inputs(this);
  }

  get outputs(): TransferMappingTokenOwnershipCall__Outputs {
    return new TransferMappingTokenOwnershipCall__Outputs(this);
  }
}

export class TransferMappingTokenOwnershipCall__Inputs {
  _call: TransferMappingTokenOwnershipCall;

  constructor(call: TransferMappingTokenOwnershipCall) {
    this._call = call;
  }

  get mappingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get new_owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferMappingTokenOwnershipCall__Outputs {
  _call: TransferMappingTokenOwnershipCall;

  constructor(call: TransferMappingTokenOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateGuardCall extends ethereum.Call {
  get inputs(): UpdateGuardCall__Inputs {
    return new UpdateGuardCall__Inputs(this);
  }

  get outputs(): UpdateGuardCall__Outputs {
    return new UpdateGuardCall__Outputs(this);
  }
}

export class UpdateGuardCall__Inputs {
  _call: UpdateGuardCall;

  constructor(call: UpdateGuardCall) {
    this._call = call;
  }

  get newGuard(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateGuardCall__Outputs {
  _call: UpdateGuardCall;

  constructor(call: UpdateGuardCall) {
    this._call = call;
  }
}

export class WithdrawFeeCall extends ethereum.Call {
  get inputs(): WithdrawFeeCall__Inputs {
    return new WithdrawFeeCall__Inputs(this);
  }

  get outputs(): WithdrawFeeCall__Outputs {
    return new WithdrawFeeCall__Outputs(this);
  }
}

export class WithdrawFeeCall__Inputs {
  _call: WithdrawFeeCall;

  constructor(call: WithdrawFeeCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFeeCall__Outputs {
  _call: WithdrawFeeCall;

  constructor(call: WithdrawFeeCall) {
    this._call = call;
  }
}
