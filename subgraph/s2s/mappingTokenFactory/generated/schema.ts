// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class TransferRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TransferRecord entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TransferRecord entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TransferRecord", id.toString(), this);
  }

  static load(id: string): TransferRecord | null {
    return store.get("TransferRecord", id) as TransferRecord | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get messageHash(): Bytes {
    let value = this.get("messageHash");
    return value.toBytes();
  }

  set messageHash(value: Bytes) {
    this.set("messageHash", Value.fromBytes(value));
  }

  get start_timestamp(): BigInt {
    let value = this.get("start_timestamp");
    return value.toBigInt();
  }

  set start_timestamp(value: BigInt) {
    this.set("start_timestamp", Value.fromBigInt(value));
  }

  get transaction_hash(): Bytes {
    let value = this.get("transaction_hash");
    return value.toBytes();
  }

  set transaction_hash(value: Bytes) {
    this.set("transaction_hash", Value.fromBytes(value));
  }

  get fee(): BigInt | null {
    let value = this.get("fee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fee(value: BigInt | null) {
    if (value === null) {
      this.unset("fee");
    } else {
      this.set("fee", Value.fromBigInt(value as BigInt));
    }
  }

  get withdraw_timestamp(): BigInt | null {
    let value = this.get("withdraw_timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set withdraw_timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("withdraw_timestamp");
    } else {
      this.set("withdraw_timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get withdraw_amount(): BigInt | null {
    let value = this.get("withdraw_amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set withdraw_amount(value: BigInt | null) {
    if (value === null) {
      this.unset("withdraw_amount");
    } else {
      this.set("withdraw_amount", Value.fromBigInt(value as BigInt));
    }
  }

  get withdraw_transaction(): Bytes | null {
    let value = this.get("withdraw_transaction");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set withdraw_transaction(value: Bytes | null) {
    if (value === null) {
      this.unset("withdraw_transaction");
    } else {
      this.set("withdraw_transaction", Value.fromBytes(value as Bytes));
    }
  }
}
