scalar BigInt
scalar ID

type HistoryRecord {
  id: String!
  fromChain: String!
  toChain: String!
  bridge: String!
  reason: String
  nonce: BigInt!
  requestTxHash: String!
  responseTxHash: String
  sender: String!
  recipient: String!
  sendToken: String!
  recvToken: String!
  sendAmount: String!
  recvAmount: String
  startTime: Int!
  endTime: Int
  result: Int!
  fee: String!
  feeToken: String!
  messageNonce: String
  sendTokenAddress: String
  recvTokenAddress: String
  sendOuterTokenAddress: String
  recvOuterTokenAddress: String
  guardSignatures: String
  relayer: String
  endTxHash: String
  confirmedBlocks: String
  needWithdrawLiquidity: Boolean
  lastRequestWithdraw: BigInt
  extData: String
}

type HistoryRecords {
  total: Int!
  records: [HistoryRecord]
}

type LnBridgeRelayInfo {
  id: String!
  version: String!
  nonce: BigInt!
  targetNonce: BigInt
  fromChain: String!
  toChain: String!
  bridge: String!
  relayer: String!
  sendToken: String
  recvToken: String
  tokenKey: String
  transactionHash: String!
  timestamp: Int!
  margin: String
  protocolFee: String
  baseFee: String
  liquidityFeeRate: Int
  slashCount: Int
  withdrawNonce: BigInt
  lastTransferId: String
  cost: String
  profit: String
  heartbeatTimestamp: Int
  messageChannel: String
  transferLimit: String
  softTransferLimit: String
  paused: Boolean
  dynamicFee: String
  dynamicFeeExpire: String
  dynamicFeeSignature: String
  signers: String
}

type LnBridgeRelayInfos {
  total: Int!
  records: [LnBridgeRelayInfo]
}

type SortedLnBridgeRelayInfos {
  transferLimit: BigInt!
  records: [LnBridgeRelayInfo]
}

type TokenInfo {
  tokenKey: String!
  chains: [SupportChains]
}

type SupportChains {
  fromChain: String!
  toChains: [String]
}

type ChainTokenInfo {
  chain: String!
  token: String
}

type SupportChainsV2 {
  from: ChainTokenInfo!
  toChains: [ChainTokenInfo]
}

type TokenInfoV2 {
  tokenKey: String!
  chains: [SupportChainsV2]
}

type HealthInfo {
  name: String
  callTimes: Int
}

type SafeConfirmation {
  owner: String
  signature: String
  signatureType: String
  transactionHash: String
  confirmationType: String
}

type Query {
  historyRecordById(id: String): HistoryRecord
  previousHistoryRecord(fromChain: String, toChain: String, bridge: String, relayer: String, token: String, nonce: Int): HistoryRecord
  historyRecordByTxHash(txHash: String): HistoryRecord
  firstHistoryRecord(fromChain: String, toChain: String, bridge: String, results: [Int], relayer: String, token: String, order: String, notsubmited: Boolean): HistoryRecord
  historyRecords(sender: String, recipient: String, relayer: String, needWithdrawLiquidity: Boolean, fromChains: [String], toChains: [String], bridges: [String], row: Int, page: Int, results: [Int], recvTokenAddress: String,  order: String): HistoryRecords
  checkLnBridgeExist(fromChainId: Int, toChainId: Int, fromToken: String, toToken: String, version: String): Boolean
  tasksHealthCheck(name: String): [HealthInfo]
  queryRelayRecords(fromChain: String, toChain: String, bridge: String, relayer: String, row: Int): HistoryRecords
  queryLnBridgeRelayInfos(fromChain: String, toChain: String, version: String, bridge: String, relayer: String, row: Int, page: Int): LnBridgeRelayInfos
  sortedLnBridgeRelayInfos(fromChain: String, toChain: String, version: String, bridge: String, token: String, row: Int, amount: String, decimals: Int): SortedLnBridgeRelayInfos
  queryLnBridgeSupportChains(tokenKey: String): [SupportChains]
  queryLnBridgeSupportedChains(tokenKey: String): [TokenInfo]
  queryLnBridgeSupportedChainsV2(tokenKey: String): [TokenInfoV2]
  queryMaxTransfer(fromChain: String, toChain: String, bridge: String, token: String, balance: String): BigInt
  getTransactionConfirmations(safeTxHash: String): [SafeConfirmation]
}

type Mutation {
  signConfirmedBlock(id: String, relayer: String, block: String, timestamp: Int, signature: String): String
  signHeartBeat(fromChainId: String, toChainId: String, version: String, relayer: String, tokenAddress: String, softTransferLimit: String, timestamp: Int, signature: String): String
  signDynamicFee(fromChainId: String, toChainId: String, version: String, relayer: String, tokenAddress: String, dynamicFee: String, dynamicFeeExpire: String, dynamicFeeSignature: String, timestamp: Int, signature: String): String
  proposeSafeTransaction(owner: String, safeAddress: String, chainId: Int, signature: String, signatureType: String, transactionHash: String, nonce: Int, confirmationType: String): String
}

