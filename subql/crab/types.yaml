types:
  AccountInfo:
    nonce: Index
    refcount: RefCount
    data: AccountData
  AccountSigner: MultiSigner
  Address: MultiAddress
  AncestryProof: ()
  Announcement: ProxyAnnouncement
  AuthorityId: '[u8;32]'
  AuthoritySet:
    authorities: AuthorityList
    set_id: SetId
  AuthoritySignature: '[u8;64]'
  BSCHeader:
    parentHash: H256
    uncleHash: H256
    coinbase: EthereumAddress
    stateRoot: H256
    transactionsRoot: H256
    receiptsRoot: H256
    logBloom: Bloom
    difficulty: U256
    number: u64
    gasLimit: U256
    gasUsed: U256
    timestamp: u64
    extraData: Bytes
    mixDigest: H256
    nonce: Bytes
  BabeEpochConfiguration: 'Null'
  BlockNumberFor: BlockNumber
  BridgedBlockHash: BlockHash
  BridgedBlockNumber: BlockNumber
  BridgedHeader: Header
  BridgedOpaqueCall: Vec<u8>
  CallOrigin:
    _enum:
      SourceRoot: 'Null'
      TargetAccount: (SourceAccountId, MultiSigner, MultiSignature)
      SourceAccount: SourceAccountId
  ChainId: '[u8; 4]'
  ChainProperties:
    ss58Format: Option<u8>
    tokenDecimals: Option<Vec<u32>>
    tokenSymbol: Option<Vec<Text>>
  Commit:
    target_hash: BridgedBlockHash
    target_number: BridgedBlockNumber
    precommits: Vec<SignedPrecommit>
  CompactAssignments: CompactAssignmentsWith16
  DeliveredMessages:
    begin: MessageNonce
    end: MessageNonce
    dispatchResults: 'BitVec'
  DispatchFeePayment:
    _enum:
      - AtSourceChain
      - AtTargetChain
  EcdsaAddress: EthereumAddress
  ElectionCompute:
    _enum:
      - OnChain
      - Signed
      - Authority
  ElectionResultT:
    electedStashes: Vec<AccountId>
    exposures: Vec<(AccountId, ExposureT)>
    compute: ElectionCompute
  Exposure: ExposureT
  Fee: MillauBalance
  GrandpaJustification:
    round: u64
    commit: Commit
    votes_ancestries: Vec<BridgedHeader>
  Id: '[u8; 4]'
  ImportedHeader:
    header: BridgedHeader
    requires_justification: bool
    is_finalized: bool
    signal_hash: Option<BridgedBlockHash>
  InboundLaneData:
    relayers: Vec<(UnrewardedRelayer)>
    lastConfirmedNonce: MessageNonce
  InboundRelayer: AccountId
  InitializationData:
    header: Header
    authorityList: AuthorityList
    setId: SetId
    isHalted: bool
  LaneId: '[u8; 4]'
  LogEntry: '{}'
  LookupSource: MultiAddress
  MMRProofResult:
    mmrSize: u64
    proof: Text
  MessageData:
    payload: 'Bytes'
    fee: Balance
  MessageFeeData:
    laneId: LaneId
    payload: OutboundPayload
  MessageId: (Id, MessageNonce)
  MessageKey:
    laneId: LaneId
    nonce: MessageNonce
  MessageNonce: u64
  MessagePayload: Vec<u8>
  MessagesDeliveryProofOf:
    bridgedHeaderHash: BlockHash
    storageProof: Vec<Bytes>
    lane: LaneId
  MessagesProofOf:
    bridgedHeaderHash: BridgedBlockHash
    storageProof: Vec<Bytes>
    lane: LaneId
    noncesStart: MessageNonce
    noncesEnd: MessageNonce
  MillauBalance: u64
  MillauBlockHash: H512
  MillauBlockNumber: u64
  MillauDigest:
    logs: Vec<MillauDigestItem>
  MillauDigestItem:
    _enum:
      Other: Vec<u8>
      AuthoritiesChange: Vec<AuthorityId>
      ChangesTrieRoot: MillauBlockHash
      SealV0: SealV0
      Consensus: Consensus
      Seal: Seal
      PreRuntime: PreRuntime
  MillauHeader:
    parent_Hash: MillauBlockHash
    number: Compact<MillauBlockNumber>
    state_root: MillauBlockHash
    extrinsics_root: MillauBlockHash
    digest: MillauDigest
  MmrNodesPruningConfiguration:
    step: NodeIndex
    progress: NodeIndex
    lastPosition: NodeIndex
  MultiAddress: GenericMultiAddress
  MultiSigner:
    _enum:
      Ed25519: H256
      Sr25519: H256
      Ecdsa: '[u8;33]'
  OperatingMode:
    _enum:
      - Normal
      - RejectingOutboundMessages
      - Halted
  OutboundLaneData:
    latestGeneratedNonce: MessageNonce
    latestReceivedNonce: MessageNonce
    oldestUnprunedNonce: MessageNonce
  OutboundMessageFee: Balance
  OutboundPayload:
    specVersion: u32
    weight: Weight
    origin: CallOrigin
    dispatchFeePayment: DispatchFeePayment
    call: Bytes
  PalletId: LockIdentifier
  Parameter: 'Null'
  PowerOf:
    power: Power
  Precommit:
    target_hash: BridgedBlockHash
    target_number: BridgedBlockNumber
  ProxyAnnouncement:
    real: AccountId
    callHash: Hash
    height: BlockNumber
  ProxyDefinition:
    delegate: AccountId
    proxyType: ProxyType
    delay: BlockNumber
  RawSolution: RawSolutionWith16
  Reasons:
    _enum:
      - Fee
      - Misc
      - All
  RelayerId: AccountId
  SignedPrecommit:
    precommit: Precommit
    signature: AuthoritySignature
    id: AuthorityId
  Signer: EthereumAddress
  SourceAccountId: AccountId
  SpecVersion: u32
  Status:
    _enum:
      Free: 'Null'
      Reserved: 'Null'
  StorageProofItem: Vec<u8>
  TransactionOutcome: '{}'
  TreasuryProposal:
    proposer: AccountId
    beneficiary: AccountId
    ringValue: Balance
    ringBond: Balance
    ktonValue: Balance
    ktonBond: Balance
  TronAddress: EthereumAddress
  UnrewardedRelayer:
    relayer: RelayerId
    messages: DeliveredMessages
  UnrewardedRelayersState:
    unrewardedRelayerEntries: MessageNonce
    messagesInOldestEntry: MessageNonce
    totalMessages: MessageNonce
  UsableBalance:
    usableBalance: Balance
  ValidatorPrefs: ValidatorPrefsWithBlocked
  # types below are consist with https://github.com/darwinia-network/darwinia/blob/master/runtime/crab/types.json
  #__[pallet.balances]__: {}
  BalanceInfo: 'Null'
  BalanceLock:
    id: LockIdentifier
    lockFor: LockFor
    lockReasons: LockReasons
  LockFor:
    _enum:
      Common: Common
      Staking: StakingLock
  Common:
    amount: Balance
  StakingLock:
    stakingAmount: Balance
    unbondings: Vec<Unbonding>
  LockReasons:
    _enum:
      Fee: 'Null'
      Misc: 'Null'
      All: 'Null'
  Unbonding:
    amount: Balance
    until: BlockNumber
  AccountData:
    free: Balance
    reserved: Balance
    freeKton: Balance
    reservedKton: Balance
  # __[pallet.staking]__: {}
  RingBalance: Balance
  KtonBalance: Balance
  TsInMs: u64
  Power: u32
  DepositId: U256
  StakingBalanceT:
    _enum:
      RingBalance: Balance
      KtonBalance: Balance
  StakingLedgerT:
    stash: AccountId
    activeRing: Compact<Balance>
    activeDepositRing: Compact<Balance>
    activeKton: Compact<Balance>
    depositItems: Vec<TimeDepositItem>
    ringStakingLock: StakingLock
    ktonStakingLock: StakingLock
    claimedRewards: Vec<EraIndex>
  TimeDepositItem:
    value: Compact<Balance>
    startTime: Compact<TsInMs>
    expireTime: Compact<TsInMs>
  ExposureT:
    ownRingBalance: Compact<Balance>
    ownKtonBalance: Compact<Balance>
    ownPower: Power
    totalPower: Power
    others: Vec<IndividualExposure>
  IndividualExposure:
    who: AccountId
    ringBalance: Compact<Balance>
    ktonBalance: Compact<Balance>
    power: Power
  RKT:
    r: Balance
    k: Balance
  SpanRecord:
    slashed: RKT
    paidOut: RKT
  UnappliedSlash:
    validator: AccountId
    own: RKT
    others: Vec<(AccountId, RKT)>
    reporters: Vec<AccountId>
    payout: RKT
  # __[pallet.bridge.crab]__: {}
  MappedRing: u128
  #__[pallet.bridge.eth]__: {}
  EthereumTransactionIndex: '(H256, u64)'
  EthereumBlockNumber: u64
  EthereumHeader:
    parentHash: H256
    timestamp: u64
    number: EthereumBlockNumber
    author: EthereumAddress
    transactionsRoot: H256
    unclesHash: H256
    extraData: Bytes
    stateRoot: H256
    receiptsRoot: H256
    logBloom: Bloom
    gasUsed: U256
    gasLimit: U256
    difficulty: U256
    seal: Vec<Bytes>
    baseFeePerGas: Option<U256>
    hash: Option<H256>
  EthereumAddress: H160
  EcdsaMessage: '[u8; 32; EcdsaMessage]'
  Bloom: '[u8; 256; Bloom]'
  H128: '[u8; 16; H128]'
  EthashProof:
    dagNodes: '(H512, H512)'
    proof: Vec<H128>
  EthereumReceipt:
    Legacy: LegacyReceipt
    AccessList: LegacyReceipt
    EIP1559Transaction: LegacyReceipt
  LegacyReceipt:
    gas_used: U256
    log_bloom: Bloom
    logs: Vec<LogEntry>
    outcome: TransactionOutcome
  EthereumNetwork:
    _enum:
      Mainnet:
      Ropsten:
  RedeemFor:
    _enum:
      Token:
      Deposit:
  EthereumReceiptProof:
    index: u64
    proof: Bytes
    header_hash: H256
  EthereumReceiptProofThing: '(EthereumHeader, EthereumReceiptProof, MMRProof)'
  MMRProof:
    member_leaf_index: u64
    last_leaf_index: u64
    proof: Vec<H256>
  EthereumRelayHeaderParcel:
    header: EthereumHeader
    parent_mmr_root: H256
  EthereumRelayProofs:
    ethash_proof: Vec<EthashProof>
    mmr_proof: Vec<H256>
  # __[TODO.Generalize]__: ''
  RelayAuthoritySigner: EthereumAddress
  RelayAuthorityMessage: EcdsaMessage
  RelayAuthoritySignature: EcdsaSignature
  # __[pallet.claims]__: {}
  OtherSignature:
    _enum:
      Eth: EcdsaSignature
      Tron: EcdsaSignature
  EcdsaSignature: '[u8; 65; EcdsaSignature]'
  OtherAddress:
    _enum:
      Eth: '[u8; 20; EthereumAddress]'
      Tron: '[u8; 20; TronAddress]'
  AddressT: '[u8; 20; AddressT]'
  # __[pallet.fee_market]__:
  Relayer:
    id: AccountId
    collateral: Balance
    fee: Balance
  Order:
    lane: LaneId
    message: MessageNonce
    sentTime: BlockNumber
    confirmTime: BlockNumber
    lockedCollateral: Balance
    assignedRelayers: Vec<PriorRelayer>
  PriorRelayer:
    id: AccountId
    fee: Balance
    valid_range: BlockNumber
  # __[pallet.header-mmr]__: {}
  NodeIndex: u64
  MerkleMountainRangeRootLog:
    prefix: '[u8; 4; Prefix]'
    parentMmrRoot: Hash
  # __[primitives.relay]__: {}
  OpCode: '[u8; 4; OpCode]'
  Term: u32
  RelayHeaderId: EthereumBlockNumber
  RelayHeaderParcel: EthereumRelayHeaderParcel
  RelayProofs: EthereumRelayProofs
  RelayAffirmationId:
    game_id: EthereumBlockNumber
    round: u32
    index: u32
  RelayAffirmationT:
    relayer: AccountId
    relayHeaderParcels: EthereumRelayHeaderParcel
    bond: Balance
    maybeExtendedRelayAffirmationId: Option<RelayAffirmationId>
    verified: bool
  RelayVotingState:
    ayes: Vec<AccountId>
    nays: Vec<AccountId>
  RelayAuthorityT:
    accountId: AccountId
    signer: Signer
    stake: Balance
    term: BlockNumber
  ScheduledAuthoritiesChangeT:
    nextAuthorities: Vec<RelayAuthorityT>
    deadline: BlockNumber
  MmrRootToSign:
    mmrRoot: Hash
    signatures: Vec<(AccountId, EcdsaSignature)>
  MMRRoot: Hash
  # __[crab.runtime]__: {}
  ProxyType:
    _enum:
      Any: 'Null'
      NonTransfer: 'Null'
      Governance: 'Null'
      Staking: 'Null'
      IdentityJudgement: 'Null'
      EthereumBridge: 'Null'
  # __[node.rpc]__: {}
  BalancesRuntimeDispatchInfo:
    usable_balance: Balance
  StakingRuntimeDispatchInfo:
    power: Power
  InProcessOrders:
    orders: Vec<LaneId, MessageNonce>
