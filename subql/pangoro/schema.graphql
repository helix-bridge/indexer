type Block @jsonField {
  number: Int!
  specVersion: Int!
  blockHash: String!
  extrinsicHash: String!
}

type S2SEvent @entity {
  id: ID! # laneId + 0x + nonce

  laneId: String!
  nonce: BigInt!
  requestTxHash: String! # TokenLocked tx hash
  responseTxHash: String # TokenLockedConfirmed tx hash
  sender: Account!
  result: Int! # 0 TokenLocked 1 TokenLockedConfirmed success 2 TokenLockedConfirmed fail
  recipient: String!
  token: String! # token address
  amount: String!
  startTimestamp: Date!
  endTimestamp: Date
  fee: String!

  block: Block
}

type BridgeDispatchEvent @entity {
  id: ID!

  method: String!
  data: String!
  index: Int!

  block: Block
}

type Account @entity {
  id: ID!

  # smart app
  transferTotalCount: Int
  transferIn: [Transfer] @derivedFrom(field: "recipient")
  transferOut: [Transfer] @derivedFrom(field: "sender")

  # s2s
  s2sLockedTotalCount: Int
  s2sLockedTotalAmount: BigInt
  s2sLocked: [S2SEvent] @derivedFrom(field: "sender")
}

type Transfer @entity {
  id: ID!

  sender: Account
  recipient: Account
  amount: BigInt
  section: String
  method: String
  timestamp: Date

  block: Block
}
