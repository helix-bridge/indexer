type Block @jsonField {
  number: Int!
  specVersion: Int!
  blockHash: String!
  extrinsicHash: String!
}

type S2SEvent @entity {
  id: ID! # laneId + 0x + nonce

  laneId: String!
  nonce: BigInt!
  requestTxHash: String! # TokenLocked tx hash
  responseTxHash: String # TokenLockedConfirmed tx hash
  sender: Account!
  result: Int! # 0 TokenLocked 1 TokenLockedConfirmed success 2 TokenLockedConfirmed fail
  recipient: String!
  amount: String!
  startTimestamp: Date!
  endTimestamp: Date
  fee: String!

  block: Block
}

type BridgeDispatchEvent @entity {
  id: ID!

  method: String!
  data: String!
  index: Int!
  timestamp: Date

  block: Block
}

type Account @entity {
  id: ID!

  # s2s
  s2sLockedTotalCount: Int
  s2sLockedTotalAmount: BigInt
  s2sLocked: [S2SEvent] @derivedFrom(field: "sender")
}

type XcmSentEvent @entity {
  id: ID! # messageHash + index

  txHash: String!
  sender: String!
  amount: String!
  timestamp: Int

  block: Block
}

type XcmReceivedEvent @entity {
  id: ID!
  txHash: String!
  recipient: String!
  amount: String!
  timestamp: Int

  block: Block
}

